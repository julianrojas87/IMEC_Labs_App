#!/usr/bin/node

var Client = require('../lib/lc-client.js'),
    path = require('path'),
    fs = require('fs'),
    program = require('commander');

console.error("Linked Connections Usage distribution generator per query. Use --help to discover more functions");

var allStationsNMBS = ["8895000","8895125","8891140","8833209","8892288","8886546","8874583","8831039","8843331","8843323","8863404","8842002","8841202","8863818","8885522","8821121","8821006","8821048","8821063","8821089","8821022","8821196","8892734","8895745","8811759","8866001","8812070","8864931","8886009","8866605","8866654","8874716","8864352","8842754","8822160","8895257","8895240","8832045","8895463","8864451","8843430","8811734","8865128","8865110","8863867","8891124","8814423","8894151","8821865","8871183","8891157","8894433","8812211","8832235","8821816","8865300","8873320","8861424","8894748","8832227","8811718","8841319","8831138","8882362","8896388","8891405","8861531","8884715","8841434","8812021","8821634","8811437","8831781","8864469","8821857","8822814","8814456","8822475","8811163","8822772","8884319","8821725","8881463","8814258","8883006","8843901","8886066","8891009","8891033","8813003","8813045","8813037","8811304","8819406","8812005","8811916","8815040","8814001","8811148","8822145","8814340","8895455","8884889","8886074","8865565","8882248","8811817","8861317","8864824","8872066","8872009","8861523","8863438","8874005","8842036","8864501","8842838","8896412","8845229","8874054","8873379","8871225","8864949","8811825","8875127","8863362","8814175","8892338","8892080","8892106","8811205","8895802","8893401","8811213","8831112","8814464","8831401","8892452","8812237","8863503","8844545","8892031","8822210","8891652","8883212","8895877","8883311","8893708","8895752","8892627","8892650","8821071","8843240","8822269","8881158","8895091","8861515","8895471","8811262","8871605","8871647","8842663","8821402","8812260","8811411","8844628","8811106","8893252","8833449","8883238","8874567","8872611","8841467","8861127","8843166","8843208","8872413","8864923","8861135","8866845","8811767","8871688","8871514","8814118","8814373","8864311","8844255","8881570","8844347","8861143","8885068","8895620","8811742","8892643","8865649","8832433","8861200","8863834","8831765","8881562","8893120","8892007","8893179","8811528","8895505","8881125","8841731","8871381","8863560","8893047","8845005","8871373","8865615","8811445","8812229","8864337","8822517","8895869","8866142","8884327","8866530","8814308","8873387","8861168","8822533","8842846","8832664","8891165","8884640","8896115","8811155","8811130","8831005","8843349","8864832","8881430","8821519","8891645","8821832","8812153","8824224","8883022","8811288","8821717","8844644","8895646","8885753","8841608","8895430","8832243","8822459","8833126","8895422","8824158","8811460","8822277","8814159","8842655","8886553","8871829","8863842","8821337","8814415","8843307","8895844","8895729","8896503","8896925","8896909","8863115","8863354","8871175","8884566","8864006","8843158","8874724","8812047","8881166","8844321","8821444","8822053","8821535","8821659","8832375","8821451","8891660","8892320","8821311","8892403","8811254","8896008","8893567","8811510","8882107","8882206","8872587","8871670","8892056","8871837","8833605","8893054","8833258","8874559","8812161","8895067","8864816","8843224","8814332","8881190","8832003","8886504","8833001","8886348","8882339","8865003","8892205","8895836","8841004","8841558","8841525","8821600","8895570","8841673","8872520","8814241","8811635","8814142","8891629","8871712","8872306","8894201","8832565","8822111","8861416","8814357","8811676","8863156","8871308","8886041","8822137","8882701","8866175","8864410","8863461","8883220","8871100","8871852","8891132","8875002","8864345","8881174","8885530","8861333","8822004","8822343","8811171","8821824","8893039","8864436","8894755","8896305","8812120","8893013","8811197","8842648","8866662","8886058","8841665","8814431","8885704","8832409","8812112","8841459","8881000","8861549","8893062","8882230","8821147","8821154","8821246","8821238","8861150","8822426","8895232","8863453","8863008","8864964","8864915","8832615","8833670","8844230","8866258","8883121","8824240","8894714","8821667","8881315","8895760","8814209","8821105","8811247","8871332","8881406","8895778","8832458","8891702","8891116","8812146","8811601","8833134","8893518","8892601","8832573","8865540","8886561","8811775","8844206","8844313","8884855","8873122","8871415","8865227","8871365","8843141","8896735","8842689","8811544","8873312","8822715","8884541","8881505","8884335","8886587","8841442","8892908","8861440","8814167","8842705","8811536","8896800","8861119","8871217","8814365","8822848","8861432","8884004","8814449","8864956","8811007","8893070","8824232","8893542","8895711","8893526","8831088","8863446","8843133","8893583","8883436","8812013","8894425","8892692","8893443","8833159","8822228","8821543","8812245","8894508","8831807","8893260","8883113","8871662","8844404","8844420","8843406","8862018","8842853","8874609","8894672","8895448","8812252","8833266","8844339","8881455","8871811","8884350","8821964","8892254","8833308","8842630","8872553","8895638","8831310","8891314","8885001","8845203","8844271","8883808","8821907","8814134","8814126","8811270","8833050","8844008","8844057","8892304","8895612","8896230","8845146","8895489","8884632","8872579","8811189","8866407","8846201","8866118","8841327","8893815","8873007","8896149","8841400","8814266","8811429","8811726","8822251","8844503","8895851","8896396","8822525","8893559","8896370","8833233","8893534","8833175","8821436","8822608","8821709","8893211","8873239","8863545","8895737","8811221","8891264","8891553","8891173","8894235","8812062","8833274","8892635","8832250","8832334","8895208","8891611","8894821","8815016","8811403"];

var q;

program
  .version('0.1.0')
  .option('-c --config [file]', 'specify config file')
  .arguments('<query>')
  .action(function (query) {
    try {
      query = fs.readFileSync(query, { encoding: 'utf8' });
    } catch (error) {
      console.error(error);
    }
    q = JSON.parse(query);
  })
  .parse(process.argv);

var configFile = program.config || path.join(__dirname, '../config.json'),
    config = JSON.parse(fs.readFileSync(configFile, { encoding: 'utf8' }))

if (!q) {
  console.error('Please provide a query as a string or a path towards a query file in JSON');
  process.exit();
}

var client = new Client(config),
    //Structured according to minute intervals: 0-5, 5-10, ... Contains passed by values and values added to MST
    intervals = {}; //{"0" : {total: 5, mst: 1} , ...}

client.query(q, function (stream, source, sourceStream) {
  sourceStream.on('data', function (connection) {
    var interval = Math.floor((((connection.departureTime - new Date(q.departureTime))/60000)-120)/5)*5; //120 is due to timezone bug in server
    if (!intervals[interval]) {
      intervals[interval] = { total:1, mst:0};
    } else {
      intervals[interval].total += 1
    }
  });
  
  stream.on('data', function (connection) {
    var interval = Math.floor((((connection.departureTime - new Date(q.departureTime))/60000)-120)/5)*5
    intervals[interval].mst += 1;
  });
  console.log('interval,useful');
  stream.on('end', function () {
    for (key in intervals) {
      var interval = intervals[key];
      console.log(key + ',' + interval.mst/interval.total);
    }
  });
  stream.on('error', function (error) {
    //console.error("err", error);
  });
});
